# GUI module generated by PAGE version 4.5
# In conjunction with Tcl version 8.6

try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk
    py3 = 0
except ImportError:
    import tkinter.ttk as ttk
    py3 = 1

class PyTweet_Client:
    def __init__(self, master=None):
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85' 
        _ana2color = '#d9d9d9' # X11 color: 'gray85' 
        font12 = "TkDefaultFont"
        master.configure(background="#d9d9d9")
        master.configure(highlightbackground="#d9d9d9")
        master.configure(highlightcolor="black")

        self.master = master        

        self.tweetsListBox = ScrolledText(master)
        self.tweetsListBox.place(relx=0.02, rely=0.42, relheight=0.56
                , relwidth=0.96)
        self.tweetsListBox.configure(background="white")
        self.tweetsListBox.configure(font="TkTextFont")
        self.tweetsListBox.configure(foreground="black")
        self.tweetsListBox.configure(highlightbackground="#d9d9d9")
        self.tweetsListBox.configure(highlightcolor="black")
        self.tweetsListBox.configure(insertbackground="black")
        self.tweetsListBox.configure(insertborderwidth="3")
        self.tweetsListBox.configure(selectbackground="#c4c4c4")
        self.tweetsListBox.configure(selectforeground="black")
        self.tweetsListBox.configure(width=86)
        self.tweetsListBox.configure(wrap=WORD)
        self.tweetsListBox.configure(state=DISABLED)
        self.tweetsListBox.tag_configure('author', font=('Arial', 10, 'bold'))
        self.tweetsListBox.tag_configure('text', font=('Arial', 10))
        self.tweetsListBox.tag_configure('time', font=('Arial', 10, 'italic'))

        self.tweetTextBox = Text(master)
        self.tweetTextBox.place(relx=0.02, rely=0.07, relheight=0.12
                , relwidth=0.97)
        self.tweetTextBox.configure(background="white")
        self.tweetTextBox.configure(font=font12)
        self.tweetTextBox.configure(foreground="black")
        self.tweetTextBox.configure(highlightbackground="#d9d9d9")
        self.tweetTextBox.configure(highlightcolor="black")
        self.tweetTextBox.configure(insertbackground="black")
        self.tweetTextBox.configure(selectbackground="#c4c4c4")
        self.tweetTextBox.configure(selectforeground="black")
        self.tweetTextBox.configure(width=524)
        self.tweetTextBox.configure(wrap=WORD)

        self.tweetLabel = Label(master)
        self.tweetLabel.place(relx=0.01, rely=0.01, height=21, width=68)
        self.tweetLabel.configure(activebackground="#f9f9f9")
        self.tweetLabel.configure(activeforeground="black")
        self.tweetLabel.configure(background=_bgcolor)
        self.tweetLabel.configure(disabledforeground="#a3a3a3")
        self.tweetLabel.configure(foreground="#000000")
        self.tweetLabel.configure(highlightbackground="#d9d9d9")
        self.tweetLabel.configure(highlightcolor="black")
        self.tweetLabel.configure(text='''Enter tweet:''')

        self.tweetsListLabel = Label(master)
        self.tweetsListLabel.place(relx=0.02, rely=0.35, height=21, width=82)
        self.tweetsListLabel.configure(activebackground="#f9f9f9")
        self.tweetsListLabel.configure(activeforeground="black")
        self.tweetsListLabel.configure(background=_bgcolor)
        self.tweetsListLabel.configure(disabledforeground="#a3a3a3")
        self.tweetsListLabel.configure(foreground="#000000")
        self.tweetsListLabel.configure(highlightbackground="#d9d9d9")
        self.tweetsListLabel.configure(highlightcolor="black")
        self.tweetsListLabel.configure(text='''Recent tweets:''')

        self.tweetButton = Button(master)
        self.tweetButton.place(relx=0.02, rely=0.2, height=24, width=57)
        self.tweetButton.configure(activebackground="#d9d9d9")
        self.tweetButton.configure(activeforeground="#000000")
        self.tweetButton.configure(background=_bgcolor)
        self.tweetButton.configure(disabledforeground="#a3a3a3")
        self.tweetButton.configure(foreground="#000000")
        self.tweetButton.configure(highlightbackground="#d9d9d9")
        self.tweetButton.configure(highlightcolor="black")
        self.tweetButton.configure(pady="0")
        self.tweetButton.configure(text='''Tweet!''')

        self.tweetCountSpinbox = Spinbox(master, from_=20.0, to=200.0)
        self.tweetCountSpinbox.place(relx=0.7, rely=0.34, relheight=0.07
                , relwidth=0.06)
        self.tweetCountSpinbox.configure(activebackground="#f9f9f9")
        self.tweetCountSpinbox.configure(background="white")
        self.tweetCountSpinbox.configure(buttonbackground="#d9d9d9")
        self.tweetCountSpinbox.configure(disabledforeground="#a3a3a3")
        self.tweetCountSpinbox.configure(foreground="black")
        self.tweetCountSpinbox.configure(from_="20.0")
        self.tweetCountSpinbox.configure(highlightbackground="black")
        self.tweetCountSpinbox.configure(highlightcolor="black")
        self.tweetCountSpinbox.configure(insertbackground="black")
        self.tweetCountSpinbox.configure(selectbackground="#c4c4c4")
        self.tweetCountSpinbox.configure(selectforeground="black")
        self.tweetCountSpinbox.configure(to="200.0")

        self.refreshButton = Button(master)
        self.refreshButton.place(relx=0.78, rely=0.34, height=24, width=107)
        self.refreshButton.configure(activebackground="#d9d9d9")
        self.refreshButton.configure(activeforeground="#000000")
        self.refreshButton.configure(background=_bgcolor)
        self.refreshButton.configure(disabledforeground="#a3a3a3")
        self.refreshButton.configure(foreground="#000000")
        self.refreshButton.configure(highlightbackground="#d9d9d9")
        self.refreshButton.configure(highlightcolor="black")
        self.refreshButton.configure(pady="0")
        self.refreshButton.configure(text='''Get latest tweets''')
    
    def registerMenu(self, reauthorizeMethod, saveMethod, loadMethod, quitMethod):
        """Takes in lambdas for menu commands to maintain MVC structure"""
        self.menubar = Menu(self.master,bg='#d9d9d9',fg='#000000')
        self.master.configure(menu = self.menubar)
        self.file = Menu(self.master,tearoff=0)
        self.menubar.add_cascade(menu=self.file,
                activebackground="#d9d9d9",
                activeforeground="#111111",
                background="#d9d9d9",
                foreground="#000000",
                label="File")
        self.file.add_command(
                activebackground="#d9d9d9",
                activeforeground="#000000",
                background="#d9d9d9",
                command=reauthorizeMethod,
                foreground="#000000",
                label="Reauthorize")
        self.file.add_separator(
                background="#d9d9d9")
        self.file.add_command(
                activebackground="#d9d9d9",
                activeforeground="#000000",
                background="#d9d9d9",
                command=saveMethod,
                foreground="#000000",
                label="Save Credentials")
        self.file.add_command(
                activebackground="#d9d9d9",
                activeforeground="#000000",
                background="#d9d9d9",
                command=loadMethod,
                foreground="#000000",
                label="Load Credentials")
        self.file.add_separator(
                background="#d9d9d9")
        self.file.add_command(
                activebackground="#d9d9d9",
                activeforeground="#000000",
                background="#d9d9d9",
                command=quitMethod,
                foreground="#000000",
                label="Exit")
    
    def updateTweets(self, tweets):
        """Clears the tweet listing and inserts the new tweets"""
        self.tweetsListBox.config(state=NORMAL)
        self.tweetsListBox.delete(1.0, END)
        for tweet in tweets:
            self.tweetsListBox.insert(END, str(tweet.author + ": "), 'author')
            self.tweetsListBox.insert(END, tweet.text, 'text')
            self.tweetsListBox.insert(END, str('\n' + tweet.time + '\n\n'), 'time')
        self.tweetsListBox.config(state=DISABLED)
            
    def postTweet(self):
        """Returns the text from the tweet text input and clears the input"""
        tweet = self.tweetTextBox.get(1.0, END)
        self.tweetTextBox.delete(1.0, END)
        return tweet
        
    def getTweetCount(self):
        """Returns the current count on the Count spinbox"""
        return self.tweetCountSpinbox.get()

        
# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''

    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)

        #self.configure(yscrollcommand=self._autoscroll(vsb),
        #    xscrollcommand=self._autoscroll(hsb))
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))

        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')

        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)

        # Copy geometry methods of master  (taken from ScrolledText.py)
        if py3:
            methods = Pack.__dict__.keys() | Grid.__dict__.keys() \
                  | Place.__dict__.keys()
        else:
            methods = Pack.__dict__.keys() + Grid.__dict__.keys() \
                  + Place.__dict__.keys()

        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''
        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)
        return wrapped

    def __str__(self):
        return str(self.master)

def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''
    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        return func(cls, container, **kw)
    return wrapped

class ScrolledText(AutoScroll, Text):
    '''A standard Tkinter Text widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        Text.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)